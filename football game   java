
#BlueJ class context
comment0.target=Game
comment0.text=\n\ The\ main\ method\ for\ playing\ game.\n\n\ @author\ Lin\ Han\n\ @version\ 2018/05/22\n
comment1.params=
comment1.target=Game()
comment1.text=\n\ default\ constructor\ of\ Game\ class\n
comment10.params=
comment10.target=void\ displayPlayers()
comment10.text=\n\ method\ of\ displaying\ details\ of\ each\ players\ of\ each\ team\n
comment11.params=
comment11.target=void\ displayCupResult()
comment11.text=\n\ method\ of\ displaying\ the\ cup\ result\n
comment12.params=
comment12.target=void\ findFairPlay()
comment12.text=\n\ method\ of\ finding\ fair\ play\ team\n
comment13.params=
comment13.target=void\ finalGame()
comment13.text=\n\ method\ of\ playing\ final\ stage\n
comment14.params=
comment14.target=void\ goldenAward()
comment14.text=\n\ method\ of\ getting\ golden\ award\ player\n
comment15.params=
comment15.target=void\ menu()
comment15.text=\n\ menu\ of\ playing\n
comment16.params=
comment16.target=void\ outputFile()
comment16.text=\n\ method\ of\ output\ file\n
comment17.params=
comment17.target=int\ playPenaltyShootOut()
comment17.text=\n\ play\ penalty\ shoot\ method\n
comment18.params=
comment18.target=void\ playGame()
comment18.text=\n\ method\ of\ playing\ preliminary\ stage\ \n
comment19.params=
comment19.target=void\ readFile()
comment19.text=\n\ read\ file\ method\n
comment2.params=teams
comment2.target=Game(java.util.ArrayList)
comment2.text=\n\ non-default\ constructor\ of\ Game\ class\n
comment3.params=
comment3.target=void\ choosePlayer()
comment3.text=\n\ method\ of\ input\ players\ for\ each\ team\n
comment4.params=name
comment4.target=boolean\ checkName(java.lang.String)
comment4.text=\n\ method\ of\ checking\ name\ validation\n\ @pere\ name\n
comment5.params=i\ j
comment5.target=void\ disGameResults(int,\ int)
comment5.text=\n\ display\ game\ results\n
comment6.params=
comment6.target=void\ displayMenu()
comment6.text=\n\ display\ main\ menu\n
comment7.params=
comment7.target=void\ displayRanking()
comment7.text=\n\ method\ of\ sorting\ ArrayList\ in\ of\ JAVA\n
comment8.params=t1\ t2
comment8.target=int\ compare(Team,\ Team)
comment9.params=
comment9.target=void\ displayTeams()
comment9.text=\n\ method\ of\ displaying\ details\ of\ each\ team\n
numComments=20

import java.util.*;
import java.io.*;
/**
 * The main method for playing game.
 *
 * @author Lin Han
 * @version 2018/05/22
 */
public class Game
{
    private ArrayList<Team> teams;
    private ArrayList<Team> fairTeams;
    private Scanner input;
    private RandomGoalsGenerator random;
    private ArrayList<Team> goldenTeam;
    private ArrayList<Player> goldenPlayers;
    private boolean playedA;
    private boolean playedB;

    /**
     * default constructor of Game class
     */
    public Game()
    {
        teams = new ArrayList<>();
        input = new Scanner(System.in);
        random = new RandomGoalsGenerator();
        fairTeams = new ArrayList<Team>();
        readFile();
        goldenTeam = new ArrayList<Team>();
        goldenPlayers = new ArrayList<>();
        playedA = false;
        playedB = false;
    }

    /**
     * non-default constructor of Game class
     */
    public Game(ArrayList<Team> teams)
    {
        this.teams = teams;
        input = new Scanner(System.in);
        random = new RandomGoalsGenerator();
        fairTeams = new ArrayList<Team>();
        readFile();
        goldenTeam = new ArrayList<Team>();
        goldenPlayers = new ArrayList<>();
        playedA = false;
        playedB = false;
    }

    /**
     * method of input players for each team
     */
    private void choosePlayer()
    {
        for (int i = 0; i < teams.size(); i++)
        {
            System.out.println("please input the two players for " + teams.get(i).getName());
            int count = 0;
            while (true)
            {
                System.out.println("you can only input characters, and only one '-' ");
                System.out.println("you can input the first player's name");
                String inputOne = input.nextLine();
                if (checkName(inputOne))        
                {
                    teams.get(i).getPlayerOne().setName(inputOne);
                    break;
                }
                else
                {
                    System.out.println("invalid,you have one chance to re-enter the name");
                    count++;
                    if (count == 2)
                    {
                        teams.get(i).getPlayerOne().setName("player-"+i+"-mm");
                        break;
                    }
                }
            }
            count = 0;
            while (true)
            {
                System.out.println("you can only input characters, and only one '-' ");
                System.out.println("Now, you can input second player's name");
                String inputTwo = input.nextLine();
                if (checkName(inputTwo))
                {
                    teams.get(i).getPlayerTwo().setName(inputTwo);
                    break;
                }
                else
                {
                    System.out.println("invalid");
                    count++;
                    if (count == 2)
                    {
                        teams.get(i).getPlayerOne().setName("player-"+i+"-mm");
                        break;
                    }
                }
            }
        }
    }

    /**
     * method of checking name validation
     * @pere name
     */
    private boolean checkName(String name)
    {
        boolean valid = false;
        if (name.matches("^[a-zA-Z\\-]{2,20}$"))
        {
            if (name.indexOf("-") != 0 && name.indexOf("-") != name.length()-1)
            { 
                int count = 0;
                for (int i = 0; i < name.length(); i++)
                {
                    if (name.charAt(i)=='-')
                        count++;
                }
                if (count <= 1)
                    valid = true;
            }
        }
        return valid;
    }

    /**
     * display game results
     */
    private void disGameResults(int i, int j)
    {
        System.out.println("Game result: " + teams.get(i).getName() + " " + (teams.get(i).getPlayerOne().getGoals()+teams.get(i).getPlayerTwo().getGoals()) +
            " VS " + teams.get(j).getName() + " " + (teams.get(j).getPlayerOne().getGoals()+teams.get(j).getPlayerTwo().getGoals()) );
        if (random.generateRedCard())
        {
            teams.get(i).setRedScore(teams.get(i).redCardScore() + 2);
            System.out.println("Card Awarded: " + teams.get(i).getName() + " 1 red card");
        }
        if (random.generateYellowCard())
        {
            teams.get(i).setYellowScore(teams.get(i).yellowCardScore() + 1);
            System.out.println("Card Awarded: " + teams.get(i).getName() + " 1 yellow card");
        }
        if (random.generateRedCard())
        {
            teams.get(j).setRedScore(teams.get(j).redCardScore() + 2);
            System.out.println("Card Awarded: " + teams.get(i).getName() + " 1 red card");
        }
        if (random.generateYellowCard())
        {
            teams.get(j).setYellowScore(teams.get(j).yellowCardScore() + 1);
            System.out.println("Card Awarded: " + teams.get(i).getName() + " 1 yellow card");
        }
        System.out.println("----------------------------");

    }

    /**
     * display main menu
     */
    private void displayMenu()
    {
        System.out.println("searching options");
        System.out.println("you must play Preliminary Stage first, then you can play final game");
        System.out.println("A. Play Preliminary Stage");
        System.out.println("B. Play Final");
        System.out.println("C. Display teams");
        System.out.println("D. Display Players");
        System.out.println("E. Display Cup Result");
        System.out.println("X. Close");
    }

    /**
     * method of sorting ArrayList in of JAVA
     */
    private void displayRanking()
    {
        Comparator<Team> comparator = new Comparator<Team>()
            {
                public int compare(Team t1, Team t2)
                {
                    if (t1.getPoint() != t2.getPoint())
                        return t2.getPoint()-t1.getPoint();
                    else
                        return (t2.getPlayerOne().getGoals()+t2.getPlayerTwo().getGoals())-(t1.getPlayerOne().getGoals()+t1.getPlayerTwo().getGoals());
                }
            };
        Collections.sort(teams,comparator);
        for (int i = 0; i < teams.size(); i++)
            System.out.println(teams.get(i).getName() + ": "+ (i + 1));
    }

    /**
     * method of displaying details of each team
     */
    private void displayTeams()
    {
        System.out.println("                 Played       Won    Lost    Drawn    Goals    Points     Fair Play Score");
        for (Team team : teams)
        {
            System.out.println(team.getName().substring(0,5) + "                " + (team.getWon() + team.getDrawn() + team.getLost()) + "        " + team.getWon() + "      " +
                team.getLost() + "        " + team.getDrawn() +
                "         " + (team.getPlayerOne().getGoals() + team.getPlayerTwo().getGoals()) + "          " + 
                team.getPoint() + "           " + (team.yellowCardScore() + team.redCardScore()));
        }
    }

    /**
     * method of displaying details of each players of each team
     */
    private void displayPlayers()
    {
        System.out.println("the players are displayed here: ");
        for (Team team : teams)
        {
            System.out.println(team.getPlayerOne().getName() + " (" + team.getName() + ")  - " + team.getPlayerOne().getGoals());
            System.out.println(team.getPlayerTwo().getName() + " (" + team.getName() + ")  - " + team.getPlayerTwo().getGoals());
        }
    }

    /**
     * method of displaying the cup result
     */
    private void displayCupResult()
    {        
        System.out.println("Football World Cup Winner :" + teams.get(0).getName());
        goldenAward();
        findFairPlay();
    }

    /**
     * method of finding fair play team
     */
    private void findFairPlay()
    {
        int fair = (teams.get(0).yellowCardScore() + teams.get(0).redCardScore());
        for (Team team : teams)
        {
            if ((team.yellowCardScore()+team.redCardScore()) < fair)
            {
                fair = (team.yellowCardScore() + team.redCardScore());
                fairTeams.clear();
                fairTeams.add(team);
            }
            else if ((team.yellowCardScore()+team.redCardScore()) == fair)
            {
                fairTeams.add(team);
            }
        }
        System.out.print(" FairPlay Award: ");
        for (Team team : fairTeams)
        {
            System.out.print(team.getName() + ", " );
        }
        System.out.println();
    }

    /**
     * method of playing final stage
     */
    private void finalGame()
    {
        int finalGoalsOne = random.randomForHigherTeam();
        int finalGoalsTwo = random.randomForLowerTeam(1);
        int playOneGoal = random.playerScore(finalGoalsOne);
        int playTwoGoal = finalGoalsOne - playOneGoal;
        int playOneGoalTwo = random.playerScore(finalGoalsTwo);
        int playTwoGoalTwo = finalGoalsTwo - playOneGoalTwo;
        System.out.println("now, start playing the final game");
        if (finalGoalsOne > finalGoalsTwo)
        {
            System.out.println(teams.get(0).getName() + " 's goals are " + finalGoalsOne);
            System.out.println(teams.get(1).getName() + " 's goals are " + finalGoalsTwo);
            System.out.println("the team: " + teams.get(0).getName() + " is winner!");
            teams.get(0).getPlayerOne().setGoals(playOneGoal);
            teams.get(0).getPlayerTwo().setGoals(playTwoGoal);
            teams.get(1).getPlayerOne().setGoals(playOneGoalTwo);
            teams.get(1).getPlayerTwo().setGoals(playTwoGoalTwo);
        }
        if (finalGoalsOne < finalGoalsTwo)
        {
            System.out.println(teams.get(0).getName() + " 's goals are " + finalGoalsOne);
            System.out.println(teams.get(1).getName() + " 's goals are " + finalGoalsTwo);
            System.out.println("the team: " + teams.get(1).getName() + " is winner!");
            teams.get(0).getPlayerOne().setGoals(playOneGoal);
            teams.get(0).getPlayerTwo().setGoals(playTwoGoal);
            teams.get(1).getPlayerOne().setGoals(playOneGoalTwo);
            teams.get(1).getPlayerTwo().setGoals(playTwoGoalTwo);
        }
        if (finalGoalsOne == finalGoalsTwo)
        {
            System.out.println(teams.get(0).getName() + " 's goals are " + finalGoalsOne);
            System.out.println(teams.get(1).getName() + " 's goals are " + finalGoalsTwo);
            System.out.println("now, we start playing the penalty shoot!");
            System.out.println("the team: " + teams.get(playPenaltyShootOut()).getName() + " is winner!");
            teams.get(0).getPlayerOne().setGoals(playOneGoal);
            teams.get(0).getPlayerTwo().setGoals(playTwoGoal);
            teams.get(1).getPlayerOne().setGoals(playOneGoalTwo);
            teams.get(1).getPlayerTwo().setGoals(playTwoGoalTwo);
        }
    }

    /**
     * method of getting golden award player
     */
    private void goldenAward()
    {
        int score = 0;
        for (Team team : teams)
        {
            if (team.getPlayerOne().getGoals() > score)
            {
                score = team.getPlayerOne().getGoals();
                goldenPlayers.clear();
                goldenPlayers.add(team.getPlayerOne());
                goldenTeam.clear();
                goldenTeam.add(team);
            }
            else if (team.getPlayerOne().getGoals() == score)
            {
                goldenPlayers.add(team.getPlayerOne());
                goldenTeam.add(team);
            }
            if (team.getPlayerTwo().getGoals() > score)
            {
                score = team.getPlayerTwo().getGoals();
                goldenPlayers.clear();
                goldenPlayers.add(team.getPlayerTwo());
                goldenTeam.clear();
                goldenTeam.add(team);
            }
            else if (team.getPlayerTwo().getGoals() == score)
            {
                goldenPlayers.add(team.getPlayerTwo());
                goldenTeam.add(team);
            }
        }
        System.out.print("Golden Boot Award: " );
        for (Player player : goldenPlayers)
        {
            System.out.print(player.getName() + ", " );
        }
        System.out.print(" from: ");
        for (Team team : goldenTeam)
        {
            System.out.print(team.getName() + ", " );
        }
        System.out.println();
    }

    /**
     * menu of playing
     */
    public void menu()
    {
        displayMenu();
        System.out.println("input your option");
        String choose = input.nextLine();
        while (!choose.equalsIgnoreCase("X"))
        {
            switch (choose.toUpperCase())
            {
                case "A":
                playGame();
                playedA = true;
                break;
                case "B":
                if (playedA)
                {
                    finalGame();
                    playedB = true;
                }
                else 
                    System.out.println("you must play preliminary stage first");
                break;
                case "C":
                displayTeams();
                break;
                case "D":
                displayPlayers();
                break;
                case "E":
                if (playedB)
                    displayCupResult();
                else
                    System.out.println("you must finish final game");
                break;
                default:
                System.out.println("error only choose A - X ");
            }
            displayMenu();
            System.out.println("input your option");
            choose = input.nextLine();
        }
        if (choose.equalsIgnoreCase("X"))
            outputFile();
    }

    /**
     * method of output file
     */
    private void outputFile()
    {
        if (playedB)
        {
            try
            {
                String filename = ("statistics.txt");
                PrintWriter outputFile = new PrintWriter(filename);
                outputFile.println("Football World Cup Winner :" + teams.get(0).getName());
                outputFile.print("Golden Boot Award: " );
                for (Player player : goldenPlayers)
                {
                    outputFile.print(player.getName() + ", " );
                }
                outputFile.print(" from: ");
                for (Team team : goldenTeam)
                {
                    outputFile.print(team.getName() + ", " );
                }
                outputFile.println();
                for (Team team : fairTeams)
                {
                    outputFile.print(team.getName() + ", " );
                }
                outputFile.println();
                outputFile.print("FairPlay Award: ");
                for (Team team : fairTeams)
                {
                    outputFile.print(team.getName() + ", " );
                }
                outputFile.println();
                outputFile.close();
            }
            catch(IOException exception)
            {
                System.out.println("Unexpected I/O exception occurs");
            } 
        }
    }

    /**
     * play penalty shoot method
     */
    private int playPenaltyShootOut()
    {
        int teamOneShoot = 0;
        int teamTwoShoot = 0;
        int i= 0;
        while (i < 5)
        {
            int shootOne = 1+ (int)(Math.random() * 100);
            int shootTwo = 1+ (int)(Math.random() * 100);
            if (shootOne <= 40)
            {
                teamOneShoot++;
            }
            if (shootTwo <= 40)
                teamTwoShoot++;
            i++;
        }
        System.out.println(teams.get(0).getName() + " shoot is " + teamOneShoot);
        System.out.println(teams.get(1).getName() + " shoot is " + teamTwoShoot);
        while (teamOneShoot == teamTwoShoot)
        {
            int shootOne = 1+ (int)(Math.random() * 100);
            int shootTwo = 1+ (int)(Math.random() * 100);
            if (shootOne <= 40)
                teamOneShoot++;
            if (shootTwo <= 40)
                teamTwoShoot++;
            System.out.println(teams.get(0).getName() + " shoot is " + teamOneShoot);
            System.out.println(teams.get(1).getName() + " shoot is " + teamTwoShoot);
        }
        if (teamOneShoot > teamTwoShoot)
        {
            return 0;
        }
        else
            return 1;
    }

    /**
     * method of playing preliminary stage 
     */
    private void playGame()
    {
        choosePlayer();        
        System.out.println("now, we start playing the preliminary stage!!!!!");
        for (int i = 0; i < teams.size(); i++)
        {
            int rank = Integer.valueOf(teams.get(i).getRanking()).intValue();
            for (int j = i+1; j <teams.size(); j++)
            {
                int rankTwo = Integer.valueOf(teams.get(j).getRanking()).intValue();
                int goalsOne = 0;
                int goalsTwo = 0;
                if (rank > rankTwo)
                {
                    goalsOne = random.randomForHigherTeam();
                    int playOneGoal = random.playerScore(goalsOne);
                    int playTwoGoal = goalsOne - playOneGoal;
                    teams.get(i).getPlayerOne().setGoals(playOneGoal);
                    teams.get(i).getPlayerTwo().setGoals(playTwoGoal);
                    int difference = rank - rankTwo;
                    goalsTwo = random.randomForLowerTeam(difference);
                    playOneGoal = random.playerScore(goalsTwo);
                    playTwoGoal = goalsTwo - playOneGoal;
                    teams.get(j).getPlayerOne().setGoals(playOneGoal);
                    teams.get(j).getPlayerTwo().setGoals(playTwoGoal);
                }
                else 
                {
                    goalsOne = random.randomForHigherTeam();
                    int playOneGoal = random.playerScore(goalsOne);
                    int playTwoGoal = goalsOne - playOneGoal;
                    teams.get(j).getPlayerOne().setGoals(playOneGoal);
                    teams.get(j).getPlayerTwo().setGoals(playTwoGoal);
                    int difference = rank - rankTwo;
                    goalsTwo = random.randomForLowerTeam(difference);
                    playOneGoal = random.playerScore(goalsTwo);
                    playTwoGoal = goalsTwo - playOneGoal;
                    teams.get(i).getPlayerOne().setGoals(playOneGoal);
                    teams.get(i).getPlayerTwo().setGoals(playTwoGoal);
                }
                if (goalsOne > goalsTwo)
                {
                    teams.get(i).setPoint(teams.get(i).getPoint()+3);
                    teams.get(i).setWon(teams.get(i).getWon()+1);
                    teams.get(j).setLost(teams.get(j).getLost()+1);
                }
                if (goalsOne == goalsTwo)
                {
                    teams.get(i).setPoint(teams.get(i).getPoint()+1);
                    teams.get(j).setPoint(teams.get(j).getPoint()+1);
                    teams.get(i).setDrawn(teams.get(i).getDrawn()+1);
                    teams.get(j).setDrawn(teams.get(j).getDrawn()+1);
                }
                if (goalsOne < goalsTwo)
                {
                    teams.get(j).setPoint(teams.get(j).getPoint()+3);
                    teams.get(j).setWon(teams.get(j).getWon()+1);
                    teams.get(i).setLost(teams.get(i).getLost()+1);
                }
                disGameResults(i,j);
            }
        }
        displayRanking();
    }

    /**
     * read file method
     */
    private void readFile()
    {
        String filename = "teams.txt";
        try
        {
            FileReader inputFile = new FileReader(filename);
            Scanner parser = new Scanner(inputFile);
            int teamNum = 0;
            while(parser.hasNextLine())
            {
                String line = parser.nextLine();
                Team team = new Team();
                teams.add(team);                 
                String[] ary = line.split(",");
                teams.get(teamNum).setName(ary[0]);
                teams.get(teamNum).setRanking(ary[1]);                
                teamNum++;
            }            
        }
        catch(Exception e)
        {
            System.out.println("can not find the file");
        }
    }
}



#BlueJ package file
dependency1.from=Team
dependency1.to=Player
dependency1.type=UsesDependency
dependency2.from=Game
dependency2.to=Team
dependency2.type=UsesDependency
dependency3.from=Game
dependency3.to=RandomGoalsGenerator
dependency3.type=UsesDependency
dependency4.from=Game
dependency4.to=Player
dependency4.type=UsesDependency
editor.fx.0.height=710
editor.fx.0.width=1012
editor.fx.0.x=268
editor.fx.0.y=23
objectbench.height=163
objectbench.width=1055
package.divider.horizontal=0.5996222851746931
package.divider.vertical=0.7360248447204969
package.editor.height=467
package.editor.width=953
package.editor.x=122
package.editor.y=348
package.frame.height=702
package.frame.width=1079
package.numDependencies=4
package.numTargets=5
package.showExtends=true
package.showUses=true
project.charset=UTF-8
readme.height=58
readme.name=@README
readme.width=47
readme.x=10
readme.y=10
target1.height=50
target1.name=Player
target1.showInterface=false
target1.type=ClassTarget
target1.width=80
target1.x=70
target1.y=10
target2.height=50
target2.name=Game
target2.showInterface=false
target2.type=ClassTarget
target2.width=80
target2.x=430
target2.y=10
target3.height=50
target3.name=test
target3.showInterface=false
target3.type=ClassTarget
target3.width=80
target3.x=300
target3.y=340
target4.height=50
target4.name=RandomGoalsGenerator
target4.showInterface=false
target4.type=ClassTarget
target4.width=170
target4.x=60
target4.y=200
target5.height=50
target5.name=Team
target5.showInterface=false
target5.type=ClassTarget
target5.width=80
target5.x=228
target5.y=118


#BlueJ class context
comment0.target=Player
comment0.text=\n\ the\ methods\ for\ set\ and\ get\ for\ Player\ class\n\n\ @author\ Lin\ Han\n\ @version\ 2018/05/22\n
comment1.params=
comment1.target=Player()
comment1.text=\n\ default\ constructor\ for\ Player\ Class\n
comment2.params=newName\ newGoals
comment2.target=Player(java.lang.String,\ int)
comment2.text=\n\ non-default\ constructor\ for\ Player\ Class\n
comment3.params=playerName
comment3.target=void\ setName(java.lang.String)
comment3.text=\n\ method\ for\ setting\ name\ for\ player\n\ @pere\ playerName\n
comment4.params=
comment4.target=int\ getGoals()
comment4.text=\n\ method\ for\ getting\ goals\n\ @return\ goals\n
comment5.params=playerGoals
comment5.target=void\ setGoals(int)
comment5.text=\n\ method\ for\ setting\ goals\ for\ player\n\ @pere\ playerGoals\n
comment6.params=
comment6.target=java.lang.String\ getName()
comment6.text=\n\ method\ for\ getting\ name\n\ @return\ name\n
numComments=7

/**
 * the methods for set and get for Player class
 *
 * @author Lin Han
 * @version 2018/05/22
 */
public class Player
{
    private String name;
    private int goals;

    /**
     * default constructor for Player Class
     */
    public Player()
    {
        name = "XX-XX";
        goals = 0;
    }

    /**
     * non-default constructor for Player Class
     */
    public Player(String newName, int newGoals)
    {
        name = newName;
        goals = newGoals;
    }

    /**
     * method for setting name for player
     * @pere playerName
     */
    public void setName(String playerName)
    {
        name = playerName;
    }

    /**
     * method for getting goals
     * @return goals
     */
    public int getGoals()
    {
        return goals;
    }

    /**
     * method for setting goals for player
     * @pere playerGoals
     */
    public void setGoals(int playerGoals)
    {
        goals = playerGoals;
    }

    /**
     * method for getting name
     * @return name
     */
    public String getName()
    {
        return name;
    }
}


#BlueJ class context
comment0.target=RandomGoalsGenerator
comment0.text=\n\ generate\ random\ number\n\n\ @author\ Lin\ Han\n\ @version\ 2018/05/22\n
comment1.params=
comment1.target=RandomGoalsGenerator()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ RandomGoalsGenerator\n
comment2.params=
comment2.target=boolean\ generateRedCard()
comment2.text=\n\ the\ method\ for\ generating\ red\ card\ \n\ @return\ red\ card\n
comment3.params=
comment3.target=boolean\ generateYellowCard()
comment3.text=\n\ the\ method\ for\ generating\ yellow\ card\ \n\ @return\ yellow\ card\n
comment4.params=teamScore
comment4.target=int\ playerScore(int)
comment4.text=\n\ the\ method\ for\ generating\ total\ team\ score\ \n\ @pere\ team\ total\ score\n\ @return\ playerone's\ score\n
comment5.params=
comment5.target=int\ randomForHigherTeam()
comment5.text=\n\ the\ method\ for\ generating\ scores\ for\ higher\ ranked\ team\n\ @return\ scores\n
comment6.params=difference
comment6.target=int\ randomForLowerTeam(int)
comment6.text=\n\ the\ method\ for\ generating\ scores\ for\ lower\ ranked\ team\n\ @return\ scores\n\ @pere\ the\ difference\ \n
numComments=7


/**
 * generate random number
 *
 * @author Lin Han
 * @version 2018/05/22
 */
public class RandomGoalsGenerator
{
    /**
     * Constructor for objects of class RandomGoalsGenerator
     */
    public RandomGoalsGenerator()
    {
        //no constractor, just methods
    }

    /**
     * the method for generating red card 
     * @return red card
     */
    public boolean generateRedCard()
    {
        int redCard = 1+ (int)(Math.random() * 100);
        if (redCard < 6)
        {
            return true;
        }
        return false;
    }

    /**
     * the method for generating yellow card 
     * @return yellow card
     */
    public boolean generateYellowCard()
    {
        int yellowCard = 1+ (int)(Math.random() * 100);
        if (yellowCard < 21)
        {
            return true;
        }
        return false;
    }

    /**
     * the method for generating total team score 
     * @pere team total score
     * @return playerone's score
     */
    public int playerScore(int teamScore)
    {
        int playerOneScore = (int)(Math.random() * (teamScore + 1));
        return playerOneScore;
    }    

    /**
     * the method for generating scores for higher ranked team
     * @return scores
     */
    public int randomForHigherTeam()
    {
        int x = (int)(Math.random() * 3);
        int score = (int)(Math.random() * (6 + x)); 
        return score;
    }
    
    /**
     * the method for generating scores for lower ranked team
     * @return scores
     * @pere the difference 
     */
    public int randomForLowerTeam(int difference)
    {
        int x = (int)(Math.random() * 3);
        int score = (int)(Math.random() * (6 + x - difference)); 
        return score;
    }    
}

------------------------------------------------------------------------
This is the project README file. Here, you should describe your project.
Tell the reader (someone who does not know anything about this project)
all he/she needs to know. The comments should usually include at least:
------------------------------------------------------------------------

PROJECT TITLE:
PURPOSE OF PROJECT:
VERSION or DATE:
HOW TO START THIS PROJECT:
AUTHORS:
USER INSTRUCTIONS:

Football World Cup Winner :China
Golden Boot Award: asdf,  from: Australia, 
China, 
FairPlay Award: China, 

Football World Cup Winner :Ghana
FairPlay Award: China, Spain, 

#BlueJ class context
comment0.target=Team
comment0.text=\n\ the\ methods\ for\ set\ and\ get\ for\ Team\ class\n\n\ @author\ Lin\ Han\n\ @version\ 2018/05/22\n
comment1.params=
comment1.target=Team()
comment1.text=\n\ default\ constructor\n
comment10.params=
comment10.target=int\ getPoint()
comment10.text=\n\ get\ total\ points\ for\ team\n\ @return\ point\n
comment11.params=
comment11.target=int\ redCardScore()
comment11.text=\n\ get\ red\ cards\ of\ team\n\ @return\ redCardScore\n
comment12.params=teamName
comment12.target=void\ setName(java.lang.String)
comment12.text=\n\ setting\ name\ for\ team\n\ @pere\ team's\ name\n
comment13.params=teamWon
comment13.target=void\ setWon(int)
comment13.text=\n\ setting\ how\ many\ times\ of\ won\ for\ team\n\ @pere\ team's\ won\n
comment14.params=teamLost
comment14.target=void\ setLost(int)
comment14.text=\n\ setting\ how\ many\ times\ of\ lost\ for\ team\n\ @pere\ team's\ lost\n
comment15.params=teamDrawn
comment15.target=void\ setDrawn(int)
comment15.text=\n\ setting\ how\ many\ times\ of\ draw\ for\ team\n\ @pere\ team's\ draw\n
comment16.params=teamRanking
comment16.target=void\ setRanking(java.lang.String)
comment16.text=\n\ setting\ ranking\ for\ team\n\ @pere\ team's\ ranking\n
comment17.params=teamYCardScore
comment17.target=void\ setYellowScore(int)
comment17.text=\n\ setting\ yellow\ card\ numbers\ for\ team\n\ @pere\ team's\ yellow\ card\ numbers\n
comment18.params=teamRCardScore
comment18.target=void\ setRedScore(int)
comment18.text=\n\ setting\ red\ card\ numbers\ for\ team\n\ @pere\ team's\ red\ card\ numbers\n
comment19.params=teamPoint
comment19.target=void\ setPoint(int)
comment19.text=\n\ setting\ point\ for\ team\n\ @pere\ teamPoint\n
comment2.params=newName\ newRanking\ newPlayerOne\ newPlayerTwo\ newYCard\ newRCard\ newPoint\ newWon\ newLost\ newDrawn
comment2.target=Team(java.lang.String,\ java.lang.String,\ Player,\ Player,\ int,\ int,\ int,\ int,\ int,\ int)
comment2.text=\n\ non-default\ constructor\n
comment20.params=
comment20.target=int\ yellowCardScore()
comment20.text=\n\ get\ yellow\ cards\ of\ team\n\ @return\ yellowCardScore\n
comment3.params=
comment3.target=java.lang.String\ getName()
comment3.text=\n\ get\ name\ of\ team\n\ @return\ name\n
comment4.params=
comment4.target=int\ getWon()
comment4.text=\n\ get\ how\ many\ times\ of\ won\ of\ team\n\ @return\ won\n
comment5.params=
comment5.target=int\ getLost()
comment5.text=\n\ get\ how\ many\ times\ of\ lost\ of\ team\n\ @return\ lost\n
comment6.params=
comment6.target=int\ getDrawn()
comment6.text=\n\ get\ how\ many\ times\ of\ drawn\ of\ team\n\ @return\ drawn\n
comment7.params=
comment7.target=java.lang.String\ getRanking()
comment7.text=\n\ get\ ranking\ of\ team\n\ @return\ ranking\n
comment8.params=
comment8.target=Player\ getPlayerOne()
comment8.text=\n\ get\ player\ one\n\ @return\ playerOne\n
comment9.params=
comment9.target=Player\ getPlayerTwo()
comment9.text=\n\ get\ player\ two\n\ @return\ playerTwo\n
numComments=21

/**
 * the methods for set and get for Team class
 *
 * @author Lin Han
 * @version 2018/05/22
 */
public class Team
{
    private String name;
    private String ranking;
    private Player playerOne;
    private Player playerTwo;
    private int yellowCardScore;
    private int redCardScore;
    private int point;
    private int won;
    private int lost;
    private int drawn;

    /**
     * default constructor
     */
    public Team()
    {
        name = "";
        ranking = "";
        playerOne = new Player();
        playerTwo = new Player();
        yellowCardScore = 0;
        redCardScore = 0;
        point = 0;
        won = 0;
        lost = 0;
        drawn = 0;
    }

    /**
     * non-default constructor
     */
    public Team(String newName, String newRanking, Player newPlayerOne, Player newPlayerTwo, int newYCard, int newRCard, int newPoint, int newWon, int newLost, int newDrawn)
    {
        name = newName;
        ranking = newRanking;
        playerOne = newPlayerOne;
        playerTwo = newPlayerTwo;
        yellowCardScore = newYCard;
        redCardScore = newRCard;
        point = newPoint;
        won = newWon;
        lost = newLost;
        drawn = newDrawn;
    }

    /**
     * get name of team
     * @return name
     */
    public String getName()
    {
        return name;
    }

    /**
     * get how many times of won of team
     * @return won
     */
    public int getWon()
    {
        return won;
    }

    /**
     * get how many times of lost of team
     * @return lost
     */
    public int getLost()
    {
        return lost;
    }

    /**
     * get how many times of drawn of team
     * @return drawn
     */
    public int getDrawn()
    {
        return drawn;
    }

    /**
     * get ranking of team
     * @return ranking
     */
    public String getRanking()
    {
        return ranking;
    }    

    /**
     * get player one
     * @return playerOne
     */
    public Player getPlayerOne()
    { 
        return playerOne;        
    }

    /**
     * get player two
     * @return playerTwo
     */
    public Player getPlayerTwo()
    { 
        return playerTwo;        
    }

    /**
     * get total points for team
     * @return point
     */
    public int getPoint()
    {
        return point;
    }

    /**
     * get red cards of team
     * @return redCardScore
     */
    public int redCardScore()
    {
        return redCardScore;
    }

    /**
     * setting name for team
     * @pere team's name
     */
    public void setName(String teamName)
    {
        name = teamName;
    }

    /**
     * setting how many times of won for team
     * @pere team's won
     */
    public void setWon(int teamWon)
    {
        won = teamWon;
    }

    /**
     * setting how many times of lost for team
     * @pere team's lost
     */
    public void setLost(int teamLost)
    {
        lost = teamLost;
    }

    /**
     * setting how many times of draw for team
     * @pere team's draw
     */
    public void setDrawn(int teamDrawn)
    {
        drawn = teamDrawn;
    }

    /**
     * setting ranking for team
     * @pere team's ranking
     */
    public void setRanking(String teamRanking)
    {
        ranking = teamRanking;
    }

    /**
     * setting yellow card numbers for team
     * @pere team's yellow card numbers
     */
    public void setYellowScore(int teamYCardScore)
    {
        yellowCardScore = teamYCardScore;
    }

    /**
     * setting red card numbers for team
     * @pere team's red card numbers
     */
    public void setRedScore(int teamRCardScore)
    {
        redCardScore = teamRCardScore;
    }

    /**
     * setting point for team
     * @pere teamPoint
     */
    public void setPoint(int teamPoint)
    {
        point = teamPoint;
    }

    /**
     * get yellow cards of team
     * @return yellowCardScore
     */
    public int yellowCardScore()
    {
        return yellowCardScore;
    }
}

Australia,2
Ghana,4
China,3
Spain,1

#BlueJ class context
comment0.target=test
comment0.text=\n\ Write\ a\ description\ of\ class\ test\ here.\n\n\ @author\ (your\ name)\n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=void\ sampleMethod()
comment2.params=
comment2.target=void\ test()
numComments=3

import java.util.*;
/**
 * Write a description of class test here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class test
{

    public void sampleMethod()
    {
        // put your code here
        int a = 6;
        System.out.println(a *= a);
        
    }
    
    public void test()
    {
        int x = 1;
        int y =1 ;
        int z =1;
        if (x-- == 1&& y-- ==1 || z-- ==1)
        {
            System.out.println("x"+ x + "y" + y + "z "+ z);
            
        }
        
    }
}
